<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jusmistic&#39;s Diary on Jusmistic&#39;s Diary</title>
    <link>https://jusmistic.github.io/</link>
    <description>Recent content in Jusmistic&#39;s Diary on Jusmistic&#39;s Diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 03 Jun 2019 02:00:53 +0700</lastBuildDate>
    <atom:link href="https://jusmistic.github.io/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Malware Diary: DigMine Part2.1 - Dynamic Analysis ฉบับคนขี้เกียจ</title>
      <link>https://jusmistic.github.io/2019/digmine-2/</link>
      <pubDate>Mon, 03 Jun 2019 02:00:53 +0700</pubDate>
      
      <guid>https://jusmistic.github.io/2019/digmine-2/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;images/malware-diary21.jpg&#34; alt=&#34;เราเปล่าเขียนจอย เพื่อนทำให้ อิอิ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;หลังจากที่ Part ที่แล้วเราได้ทำการวิเคราะห์แบบ Static Analysis ไปแล้ว แต่ก็ยังไม่ได้ข้อมูลอะไรเท่าไรนอกจาก Source Code ของมัลแวร์จริง ๆ ถ้า Source Code ไม่ได้มีการ Obfuscate ไว้เมื่อถึงจุดนี้เราควรที่จะเข้าใจการทำงานของมัลแวร์บ้างแล้ว แต่ครั้งนี้ไม่ไง เพราะถึงได้ Source Code มาแต่เราก็อ่านไม่ออกอยู่ดี -___-&lt;/p&gt;

&lt;p&gt;คำถามต่อมา&amp;hellip;แล้วไงต่ออ่ะ
ขั้นตอนต่อไปที่เราจะทำเค้าเรียกว่า Dynamic Analysis แต่เคสนี้คือเราขี้เกียจไง จะให้ไปใช้ Ollydbg หรือพวก Debugger ก็ขี้เกียจ(ความจริงก็คือใช้มั่ยเปนนนน) แต่การที่เราได้ Source Code  เราสามารถเอาไปใช้ต่อได้&lt;/p&gt;

&lt;p&gt;จำได้ไหมครับจาก Part ที่แล้ว จาก Source Code เรารู้อะไรบ้าง?
เรารู้ว่ามันมีฟังก์ชั่นที่คาดว่าเป็นฟังก์ชั่นถอดรหัส&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-AutoIt&#34;&gt;Func gmfnzmi($gzhkalbyyq)
    $omipkddl = &amp;quot;&amp;quot;
    For $dlcqoqsup = $rgnzkvwianz To kfwjwweupfy($gzhkalbyyq)
        $swfrwp = divznduthlwg($gzhkalbyyq, $dlcqoqsup, furhpb())
        $qkkocudrwel = ejncdqtyn($usurpagyyn, $swfrwp, iewdtkkvw())
        $omipkddl &amp;amp;= divznduthlwg($dxbvhjewu, $qkkocudrwel, $mpbuyk)
    Next
    Return $omipkddl
EndFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;คำถามคือเราจะเอา Source Code เนี้ย ไปใช้ยังไง?
ถ้าถามคำถามนี้กับคนขี้เกียจ ๆ แบบเราก็คือในเมื่อเรารู้ว่าฟังก์ชั่นนี้เป็นฟังก์ชั่นถอดรหัสเราก็แก้มัลแวร์ให้มันแสดงค่าที่ทำการถอดรหัสออกมาสิ&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-AutoIt&#34;&gt;Func gmfnzmi($gzhkalbyyq)
    $omipkddl = &amp;quot;&amp;quot;
    ConsoleWrite(&amp;quot;Before: &amp;quot; &amp;amp; $gzhkalbyyq &amp;amp; @CRLF)
    For $dlcqoqsup = $rgnzkvwianz To kfwjwweupfy($gzhkalbyyq)
        $swfrwp = divznduthlwg($gzhkalbyyq, $dlcqoqsup, furhpb())
        $qkkocudrwel = ejncdqtyn($usurpagyyn, $swfrwp, iewdtkkvw())
        $omipkddl &amp;amp;= divznduthlwg($dxbvhjewu, $qkkocudrwel, $mpbuyk)
    Next
    ConsoleWrite(&amp;quot;After: &amp;quot; &amp;amp; $omipkddl &amp;amp; @CRLF)
    Return $omipkddl
EndFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;จำ VM ? ที่เรา Setting ไว้ใช้จาก Part ที่แล้วได้ป่ะ?
เราก็ไปดาวน์โหลดคอมไฟล์เลอร์ของภาษา AutoIt มาลงเพื่อรันโค๊ดมัลแวร์ที่เราได้ทำการแก้ไปด้านบน&lt;/p&gt;

&lt;p&gt;แต่! อย่าพึ่งรันเลยนะครับ ลง Google Chrome ก่อน เพราะมัลแวร์ตัวนี้มี Mechanism บางอย่างเกี่ยวกับ Google Chrome ถ้าเราอยากเข้าใจการทำงานจำเป็นต้องติดตั้งด้วย(ถามว่ารู้ได้ไง ตอนแรกเราไม่ได้ลงอ่ะ แล้วมันก็หาอะไรไม่เจอ มาเจอทีหลังว่า DigMine มันมี Mechanism บางอย่างกับ Google Chrome ด้วย)&lt;/p&gt;

&lt;p&gt;แล้วถ้าลง Google Chrome แล้วรันเลยมั้ย?
ก็ไม่อยู่ดี เพราะถ้าอย่างนั้นเราอาจจะรู้แค่ว่าค่าที่ถูกนำว่าถอดรหัส มีอะไรบ้าง อาจพลาดรายละเอียดบางส่วน
โดยเฉพาะในส่วนที่เป็น Network เราคิดว่าเราไม่น่าเห็น Flow การทำงานของ Network จาก Source Code หรอกถูกมะ?
ฉนั้นเราต้องใช้สิ่งที่เรียกว่า &lt;strong&gt;&lt;a href=&#34;https://www.wireshark.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Wireshark&lt;/a&gt;&lt;/strong&gt; ครับ&lt;/p&gt;

&lt;p&gt;ถ้าจะใช้แค่ Wireshark ในการดักจับ Packet ที่รับส่งในเครื่องเรา แต่แค่นั้นผมคิดว่ายังไม่น่าจะเพียงพอนะ เพราะถ้ามันมีการแก้ไขค่าต่าง ๆ เช่น Registry ในเครื่อง Wireshark เองไม่ได้ดักจับในส่วนนี้ด้วย เราต้องใช้โปรแกรมที่เรียกว่า &lt;strong&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/procmon&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Process Monitor&lt;/a&gt;&lt;/strong&gt;  หรือชื่อเล่นคือ ProcMon (จากลูกพี่ Microsoft เองเบย)&lt;/p&gt;

&lt;p&gt;ซึ่งเจ้า ProcMon  เนี่ย จริง ๆ แล้วมันคล้าย ๆ กับ Wireshark แต่สิ่งที่มันดักจับเป็น Event ที่เกิดขึ้นบน Windows&lt;br /&gt;
พอติดตั้งเสร็จทั้งสามตัวเนี่ยกดอย่าลืมกด Snapshot ด้วยนะครับ เผื่ออยากกลับมาทำใหม่&lt;/p&gt;

&lt;p&gt;เปิด Wireshark กับ ProcMon ขึ้นมา จากนั้นก็กดแคปเชอเลยครับ&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary23.jpg&#34; alt=&#34;ทำไมกดแล้วไม่เห็นได้เลยอ่ะ...&#34; /&gt;&lt;/p&gt;

&lt;p&gt;อ้าว คนละแคปหรอ เค ๆๆๆๆ
กด Capture ของทั้งสองโปรแกรม จากนั้นก็รัน AutoIt เลยจ้าม&amp;hellip; (ผลลัพท์ที่ได้จิ้ม&lt;a href=&#34;[https://github.com/jusmistic/Malware-Analysis-DigMine/blob/master/Source%20Code/malware_output.txt](https://github.com/jusmistic/Malware-Analysis-DigMine/blob/master/Source Code/malware_output.txt)&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ตรงนี้&lt;/a&gt;จ้า)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary269.png&#34; alt=&#34;ผลลัพท์ของมัลแวร์&#34; /&gt;&lt;/p&gt;

&lt;p&gt;แต่แบบนี้ผมว่ายังมีข้อเสียอยู่คือ… &lt;strong&gt;โปรแกรมในส่วนที่ไม่ได้เข้า Control Flow เราจะไม่รู้เลยว่ามันมีการทำงานยังไงบ้าง&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;แต่เท่าที่ผมสังเกตุดู Flow นีัยคือ Flow การทำงานที่มัลแวร์มันทำการ Infect อ่ะ เลยคิดว่าเราน่าจะได้อะไรบ้างอยู่ เห้ย เกือบลืมเราไม่ได้มีแค่ String ชุดนี้นี่หว่า เรายังมี Pcap ที่เรากดแคปเชอ(ปราง)บน Wireshark กับ Log ของ ProcMon อยู่นี่หว่า.. น่าจะเจออะไรเพิ่ม&lt;/p&gt;

&lt;p&gt;วิธีที่ผมทำคือ ผมจะเริ่มดูจาก String ที่เราได้มาจากมัลแวร์ถ้าเจออะไรที่น่าสนใจผมจะกลับไปดูที่ pcap กับ Log นะ หลังจากไล่ ๆ อ่าน String ไปเจอบรรทัดที่ 47&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary24.jpg&#34; alt=&#34;www.google.com 🤔&#34; /&gt;&lt;/p&gt;

&lt;p&gt;เป็นโดเมนแฮะ งั้นลองไปดูใน Wireshark ดีกว่า..&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary25.jpg&#34; alt=&#34;Paket เรียกขอ www.google.com จาก DNS Server&#34; /&gt;&lt;/p&gt;

&lt;p&gt;มีการเรียก DNS ไปที่ Google จริง ๆ แฮะ เลยไล่ดูต่อคือมัน Ping ไปที่ Google คำถามคือ..ทำไม? เลยมานั่งคิดนอนคิด ผมคิดว่ามันน่าจะใช้เป็นเงื่อนไขในการเช็คว่ามันต่ออินเตอร์เน็ตได้ไหม ถ้าเชื่อมต่อได้มันคงทำอะไรซักอย่างนึกที่เราไม่รู้ (อันนี้ผมคาดเดาเอาจากบริบทนะ ยังไงใครว่าง ๆ ลองเอาไปทำแบบไม่ต่ออินเตอร์เน็ตที ได้ความยังไงบอกผมด้วย 5555)&lt;/p&gt;

&lt;p&gt;โอเค เรากลับมาดูที่ String ต่อเผื่อเจออะไรน่าสนใจ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary26.png&#34; alt=&#34;เหมือนเป็น HTTP Request เบย!&#34; /&gt;&lt;/p&gt;

&lt;p&gt;กลับไปดูที่ Wireshark เผื่อมันมีการเรียก HTTP Request จริง ๆ ก่อนอื่นขอตัดมา Network 101 อธิบายเรื่อง DNS ก่อน&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary27.png&#34; alt=&#34;์Network 101&#34; /&gt;&lt;/p&gt;

&lt;p&gt;คือจะเล่าย่อ ๆ DNS คือ Service ที่แปลงจากชื่อเว็บไซต์ไปเป็น  IP ถูกมะ ด้านบน(สีแดง)มันคือ Query ไปขอ fusu[.]icu โดยใช้ Type A คือ Type A เนี่ยเป็นการบอกว่าให้ DNS Server มันตอบมาเป็น IP หน่อย(สีเขียว) มันจะได้เอา IP ไปใช้ต่อ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;จบแล้วครับอธิบายสั้น ๆ ก็ประมาณนี้ ถ้างงตรงนี้อย่าถามผมนะครับ เพราะผมก็งงเหมือนกัน&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ถามว่าทำไมต้องอธิบาย? เพราะเราจะเอาไปหา Flow การเชื่อมต่อไปยัง Host นี้ใน Wireshark ไง แล้วตอน Filter มันต้องใช้ IP! ซึ่งในที่นี้คือ 104.27.136.252 และ 104.27.137.252 นะ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary28.png&#34; alt=&#34;มันมี HTTP Request จริง ๆ ด้วยโว้ยยย&#34; /&gt;&lt;/p&gt;

&lt;p&gt;​    เอาตรง ๆ ป่ะ ตอนแรกที่ผมเห็น Packet นี้ผมโคตรว้าวเลยอ่ะ คือผมไม่เคยเห็นใครใช้ HEAD Method มาก่อน ถ้าไม่นับ CTF อันนี้น่าจะเป็นครั้งแรก อีกอย่างคือการใช้งานมันโคตร Creative คือปกติเนี่ย HEAD Method เนี่ยมันจะส่งไปได้แต่ส่วนที่เป็น HTTP Header แล้ว Server ก็ตอบมาได้แต่ส่วนที่เป็น Header เหมือนกัน ซึ่งความ Creative มันอยู่ตรงที่คนทำมัลแวร์ตัวนี้เค้าเอาค่าต่าง ๆ ที่ต้องการส่งมันทำเป็น Custom Header แล้วส่งไป แล้ว Server ก็ตอบโดยแปะค่ามาเป็น Custom Header เหมือนกัน เอ้ะ หรือปกติเค้าใช้แบบนี้กันอยู่แล้ว 55555&lt;/p&gt;

&lt;p&gt;​    จาก Packet ด้านบนจะเห็นว่ามันส่งรายละเอียดต่าง ๆ ของคอมเรากลับไปที่ Server แล้ว Server ก็ Reply กลับมาโดยมี Custom Header ที่น่าสนใจมาด้วยคือ Unzip กับ Zip เพราะภายในมี Url ที่น่าสนใจอยู่&lt;/p&gt;

&lt;p&gt;เลยมาไล่ดู Flow Packet ต่อ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary29&#34; alt=&#34;HTTP Request Method ที่น่าสนใจ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;จะเห็นว่ามันดาวน์โหลดไฟล์มาทั้งสองไฟล์ที่ url อยู่ในค่า unzip และ zip ด้วย แต่…ดาวน์โหลดไปไว้ที่ไหนล่ะ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary210.jpg&#34; alt=&#34;ส่อง Log ของ ProcMon แปป&#34; /&gt;&lt;/p&gt;

&lt;p&gt;จะเห็นว่ามันทำการดาวน์โหลดไฟล์มาไว้ที่ %appdata%/ ซึ่งถ้าลองเข้าไปดูเราจะเจอทั้ง 7za.exe และ files.7z แต่… มันไม่ได้เจอแค่นั้นอ่ะดิ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary210-fix1.png&#34; alt=&#34;WTF มาจากไหนฟะะ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;เลยลองไล่ดู Wireshark ก็ไม่เห็นแฮะว่ามันไปดาวน์ไฟล์พวกนี้มาตอนไหน เลยลองกลับไปหาใน String ของมัลแวร์ดู&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;After: 7za.exe e files.7z -aoa -p(พาสเวิร์ด)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;พอเห็นบรรทัดนี้พอเข้าใจละ แต่ยังไม่มันใจเลยลองไปหาใน Google ต่อ… พบว่า 7za.exe คือโปรแกรม 7z แบบ Standalone (ทุกอย่างยัดไว้ใน Binary ตัวเดียว) และทำการแตกไฟล์ files.7z โดยมี -p[password] เราสามารถลองเช็คได้โดยการลองแตกไฟล์ดูโดยใช้ Password นี้&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary216.png&#34; alt=&#34;ลองแตกไฟล์โดยใช้ Password ที่ได้มัลแวร์&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ลองดูเทียบกับภาพบนจะเห็นว่า มันมีบางไฟล์ที่หายไปนั่นคือไฟล์ app.exe แล้วไฟล์ app.exe มาจากไหน?&lt;/p&gt;

&lt;p&gt;เลยกลับไปส่อง String ที่ได้มาจากมัลแวร์…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary211.png&#34; alt=&#34;ขี้เกียจคิดแคปชั่น&#34; /&gt;&lt;/p&gt;

&lt;p&gt;เหมือนมันมีการเรียกคำสั่ง Copy ไฟล์แฮะ…คำถามต่อมาก็อปปี้มาจากไฟล์ไหน? คำตอบคือ Copy มาจากไฟล์ Execute ที่เรารันไปครั้งแรกนั่นแหละ(เอา hash ไฟล์มาเทียบดู) แต่มัน Copy มาทำไมฟะะะ? เลยวนกลับไปดูที่ String อีกรอบ…ว่ามีอะไรให้คำตอบเราได้บ้าง&lt;/p&gt;

&lt;p&gt;มันมีการแก้ Registry แฮะ ไปเช็ด Log ด้วยจะได้ชัวร์ ๆ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary29-1.png&#34; alt=&#34;1559501244370&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ซึ่งการแก้ไขต่าง ๆ ผมสรุปมาได้ประมาณนี้ครับ&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ค่า Registry ที่มีการเปลี่ยนแปลง&lt;/th&gt;
&lt;th&gt;ค่าก่อนเปลี่ยน&lt;/th&gt;
&lt;th&gt;ค่าหลังเปลี่ยน&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Associations\LowRiskFileTypes&lt;/td&gt;
&lt;td&gt;ไม่มีการกำหนดค่า&lt;/td&gt;
&lt;td&gt;.exe&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Associations\LowRiskFileTypes&lt;/td&gt;
&lt;td&gt;ไม่มีการกำหนดค่า&lt;/td&gt;
&lt;td&gt;.exe&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\EnableLUA&lt;/td&gt;
&lt;td&gt;โดยปกติควรมีค่าเป็น 1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run\Google Updater&lt;/td&gt;
&lt;td&gt;ไม่มี Registry นี้&lt;/td&gt;
&lt;td&gt;%appdata%/(user)/app.exe&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;HKCU\Software\Unzip\Installed&lt;/td&gt;
&lt;td&gt;ไม่มี Registry นี้&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ol&gt;
&lt;li&gt;Registry ตัวนี้เป็นการกำหนดสกุลไฟล์ที่จะไม่ให้แจ้งเตือนเวลาทำการรัน โดยในที่นี้ตัวมัลแวร์เลือกเป็นนามสกุล .exe อ่านคำอธิบายเพิ่ม&lt;a href=&#34;https://blog.malwarebytes.com/detections/pum-optional-lowriskfiletypes/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ลิงค์นี้&lt;/a&gt;เบย&lt;/li&gt;
&lt;li&gt;กลับไปอ่านข้อหนึ่ง ลองดูว่ามันต่างกันตรงไหนและมันจะส่งผลแตกต่างกันอย่างไร&lt;/li&gt;
&lt;li&gt;Registry ตัวนี้ถ้าเราเปลี่ยนเป็น 0 (False) มันจะไม่ทำการแจ้งเตือนเวลาที่โปรแกรมทำการเปลี่ยนแปลงกับเครื่องคอมพิวตเอร์ &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/microsoft-windows-lua-settings-enablelua&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;อ่านเพิ่ม&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ข้อนี้ดูเหมือนจะเป็นคำตอบของเราเลยนะฮะ&lt;/strong&gt; เพราะจากค่า Value ด้านในมันเป็น Path ที่ไปที่ %appdata%/(user)/app.exe  และการตั้งค่า Registry ตรงนี้คือการสั่งให้ Windows ทำการรันไฟล์นี้เมื่อทำการเปิดเครื่อง ขั้นตอนนี้เป็นขั้นตอนที่มัลแวร์ทำการฝังตัวบมเครื่องนั่นเอง..&lt;/li&gt;
&lt;li&gt;ตัวนี้ผมไม่ค่อยแน่ใจเท่าไหร เพราลองไล่ดู Flow มันเหมือนตั้งต่า Registry นี้ตอนที่ทำการโหลดไฟล์ 7za.exe เสร็จ เหมือนเป็นสถานะการติดตั้ง อะไรประมาณนี้&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;แต่…มันจะรันตัวเองซ้ำไปทำไมวะ 555    ตอนนี้เหมือนเราเห็นแค่ Mechanism ที่มัลแวร์ทำการฝังตัวเอง แต่ยังไม่ค่อยเห็น Mechanism ที่มัลแวร์มันทำอะไรที่ส่งผลกระทบกับเครื่องคอมเลย&lt;/p&gt;

&lt;p&gt;จริง ๆ ProcMon มีอีก Feature ที่น่าสนใจคือ Process Tree&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary211-1.png&#34; alt=&#34;app.exe มีการเรียก update-x64.exe ด้วยแฮะ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;คือเราสามารถดูได้ว่า Process ไหนมันเรียก Process ไหนคือจาก Process Tree เนี่ย เราจะเห็นว่า app.exe มันมีการเรียกทั้ง chrome.exe(Google Chrome) และ update-x64.exe(Monero Miner)&lt;/p&gt;

&lt;p&gt;ในส่วนของ Google Chrome เนี่ยผมขอข้ามไปก่อนนะ เดี้ยวเรามาดูกัน Part หน้า ซึ่งผมว่าส่วนนี้ก็น่าสนใจไม่แพ้กัน&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/malware-diary212.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;จากชุดข้อความที่ได้จากมัลแวร์เหมือนมีการเช็ค CPU Architecture ก่อนที่จะทำการ Mining เหรียญ Monero ด้วย&lt;/p&gt;

&lt;p&gt;ซึ่งนี่น่าจะเป็นเหตุผลที่มัลแวร์มันการแก้ไข Registry ที่จะทำการรันโปรแกรมเมื่อ StartUp ไปที่ %appdata%/[user]/app.exe(ตัวมัลแวร์เอง) แล้วตัวมัลแวร์จึงมารัน Update-x64.exe ต่อเพื่อทำการ Mining Monero ต่อ
โดยใช้ไฟล์ Config ที่อยู่ใน Path เดียวกันนั่นเอง&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ตอนนี้เริ่มขี้เกียจแล้วครับ&lt;/strong&gt; Part นี้ผมขอเบรคไว้ที่ตรงนี้ก่อน เดี้ยว Part หน้าเรามาดูกันว่ามัลแวร์ตัวนี้มันทำอะไรกับ Google Chrome ของเหยื่อบ้าง ผมว่าน่าจะสนุกไม่แพ้ Part นี้เลยครับ&lt;/p&gt;

&lt;p&gt;ถ้าอ่านมาถึงตรงนี้ก็ขอบคุณทุกคนที่ติดตามมาจนถึง Part 2 และยังอ่านจนจบอีก หากมีอะไรผิดพลาด/อยากติชมอะไรเมนชั่นมาบอกผมใน Twitter เลยก็ได้ครับ พร้อมรับคำติชมไปปรับเสมอครับ 😄&lt;/p&gt;

&lt;p&gt;ปล. ต้องขอโทษจริง ๆ ครับที่ Part นี้มาช้ามาก  เพราะติดค่าย &lt;a href=&#34;https://www.facebook.com/itcampKMITL/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ITCAMP | KMITL&lt;/a&gt;  ได้ข่าวว่าค่าย Netherine มีเล่น CTF กันด้วย ไม่ไปก็กลัวจะเสียดายทีหลังเลยต้องแว๊ปไปหน่อย 😅&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Malware Diary: DigMine Part1 - เมื่อผลของ Malware Sandbox ไม่เป็นไปตามที่หวัง</title>
      <link>https://jusmistic.github.io/2019/digmin-1/</link>
      <pubDate>Sun, 26 May 2019 15:22:25 +0700</pubDate>
      
      <guid>https://jusmistic.github.io/2019/digmin-1/</guid>
      <description>

&lt;p&gt;&lt;em&gt;บทความนี้เป็นไดอารี่ไม่ใช่ Tutorial นะครับ&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;เมื่อช่วงเดือนที่ผ่านมาได้รับข้อความแปลก ๆ เป็นไฟล์ที่ชืิ่อ video_xxxxx.zip หรือ video_xxxxx.bz จากเพื่อนในเฟรนด์ลิสท์&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jusmistic.github.io/images/malware-diary1/1.jpg&#34; alt=&#34;ขอเซ็นเซอร์ด้วยรูปเจนนี่นะค้าบ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;เห็นครั้งแรกก็เดาก่อนเลยว่าเป็นมัลแวร์แน่ ๆ คนที่ส่งมาให้เป็นผู้หญิงแถมตั้งชื่อไฟล์ว่า Video อีก มันช่างน่ากด(รันไฟล์)เหลือเกินน!&lt;/p&gt;

&lt;p&gt;พอได้ไฟล์เลยเกิดความสงสัยว่าเห้ย มันใช่ไวรัสจริงป่ะวะหรือแค่คิดไปเองเลยเป็นที่มาของไดอารี่ฉบับนี้!&lt;/p&gt;

&lt;p&gt;ลองหาใน Google เกี่ยวกับ Malware Analysis พบว่าเราสามารถแบ่งการทำ Malware Analysis เป็น 2 ประเภท&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt; คือการวิเคราะห์ไฟล์โดยไม่ Execute เช่นการทำ Reverse Engineer เพื่อดูว่ามัลแวร์มันทำงานยังไง&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic Analysis&lt;/strong&gt; คือการวิเคราะห์จากการสังเกตุพฤติกรรมการทำงานของมัลแวร์โดยจะทำบนเครื่องจริงหรือบน VM ก็ได้ โดยพฤติกรรมที่เราจะสังเกตุก็อย่างเช่น มีการเขียนไฟล์อะไรไหม แก้ Registry รึเปล่า หรือมีการติดต่อกับ Network ภายนอกหรือไม่&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ดูแล้ว Static Analysis น่าจะทำได้ก่อนแฮะ เราจึงเริ่มต้นด้วยการทดลองอัพโหลดไฟล์ไปยัง Virustotal เช็ครายละเอียดไฟล์คร่าว ๆ ก่อนจะได้ดูด้วยว่าเป็นไวรัสไหม&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jusmistic.github.io/images/malware-diary1/2.jpg&#34; alt=&#34;ผลของการอัพไฟล์ขึ้นไปเช็คที่ Virustotal&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ก็อย่างที่คิดแฮะ มันน่าจะเป็นไวรัส คำถามต่อมามันทำงานยังไงกันนะ 🤔 เลยลอง Google ดูจนเจอสิ่งที่เรียกว่า Cuckoo Sandbox เป็นระบบที่ใช้ในการทำ Automate Malware Analysis เอ่อดีแฮะ เซ็ตเสร็จเอามัลแวร์ไปรันแล้วพักไปกินกาแฟชิว ๆ แล้วค่อยกลับมาดูผลดีกว่า แต่ว่า&amp;hellip;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jusmistic.github.io/images/malware-diary1/3.jpg&#34; alt=&#34;ผลของ Cuckoo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;แต่ว่า&amp;hellip;ทำไมสกอร์ไฟล์มันต่ำแปลก ๆ หว่า มันแทบไม่มีพฤติกรรมที่บ่งชี้เลยนะ เลยเลื่อนลงมาดูว่ามีพฤติกรรมอะไรที่น่าสงสัยบ้าง&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jusmistic.github.io/images/malware-diary1/4.jpg&#34; alt=&#34;ผลของ Cuckoo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;นี่มันแทบไม่เจออะไรเลยนี่หว่า มีแปลก ๆ แค่มีการส่ง Packet ICMP เท่านั้นที่ดูเป็นพฤติกรรมที่ประหลาด เอาไงดีวะ Sandbox ไม่เวิร์ค น่าจะเหลือทางเดียว&amp;hellip;แงะเองไงครับ&lt;/p&gt;

&lt;p&gt;ก่อนอื่นรายละเอียดเกี่ยวกับไฟล์มาก่อน เลยลอง strings บน Linux ดูว่าเจออะไรน่าสนใจบ้าง&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jusmistic.github.io/images/malware-diary1/5.jpg&#34; alt=&#34;strings ดู Text ในไฟล์แปป&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ตาเหลือบไปเห็นคำว่า &amp;ldquo;AutoIt&amp;rdquo; ใน String ที่เจอ AutoIt คืออะไรหว่า? AutoIt เป็น Script Languages ภาษาหนึ่งที่คล้าย ๆ กับภาษา Basic สร้างมาเพื่อทำงาน Automate บน Windows เลยลองหาต่อก็พบว่ามีมัลแวร์หลาย ๆ ตัวถูกพัฒนาด้วยภาษานี้และก็พบว่าภาษานี้สามารถแปลงจาก Binary ไฟล์ไปเป็น Source Code ได้&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/1g2AnafVNsgbiwBjr6/giphy.gif&#34; alt=&#34;!Reverse_Engineer == Easy_Life&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ซึ่งโปรแกรมที่ใช้คือโปรแกรม Exe2Aut ซึ่งสามารถดาวน์โหลดได้ที่ &lt;a href=&#34;https://exe2aut.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://exe2aut.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jusmistic.github.io/images/malware-diary1/9.png&#34; alt=&#34;เว็บเจ๊งเฉย!😥&#34; /&gt;&lt;/p&gt;

&lt;p&gt;เลยลองไปหาดูใน &lt;a href=&#34;https://github.com/JacobPimental/exe2aut&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt; บังเอิญว่ามีคนได้อัพโหลดไว้พอดี&lt;/p&gt;

&lt;p&gt;หลังจากได้โปรแกรมในการแปลงจาก Binary ไปเป็น Source Code แล้วรันเลยมั้ย?
คำตอบคือไม่ครับ เพราะจริง ๆ เราไม่รู้ว่าโปรแกรม Exe2Aut นั้นปลอดภัยรึเปล่าบางที Exe2Aut อาจเป็นมัลแวร์ด้วยก็ได้ใครจะรู้ ถูกมะ? สิ่งที่เราต้องทำต่อไปก็คือ..&lt;/p&gt;

&lt;h2 id=&#34;setting-virtual-machine&#34;&gt;Setting Virtual Machine&lt;/h2&gt;

&lt;p&gt;มาสร้าง Enironment จำลองเพื่อใช้ในการวิเคราะห์มัลแวร์กันดีกว่าคือเราเซ็ตครั้งเดียวใช้ได้ทั้ง Exe2Aut แล้วยาวไปยังการทำ Dynamic Analysis เลย โดยเราจะสร้าง Virtual Machine บน VirtualBox หรือ VMWare Workstation Pro ก็ได้แล้วแต่ศรัทธา(และกำลังเงิน)&lt;/p&gt;

&lt;p&gt;โดย VM จะมีรายละเอียดที่ควรตั้งค่าประมาณนี้&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OS : Windows 7 64 bit&lt;/li&gt;
&lt;li&gt;RAM: 4096 Mb&lt;/li&gt;
&lt;li&gt;HDD: About 40 Gb&lt;/li&gt;
&lt;li&gt;Network Setting: NAT เหตุผลคือ Malware จะต่อ Internet ได้แต่มองไม่เห็น Network ในวงเดียวกับเครื่อง Host ทำให้เราสามารถวิเคราะห์ Network Behavior ได้ปกติและไม่ต้องตัวในกรณีที่มัลแวร์จะแพร่กระจายมายังเครื่อง Host ด้วย&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;หลังจากสร้าง VM เสร็จให้สร้าง Snapshot ไว้ด้วยจะได้ Revert กลับได้&lt;/p&gt;

&lt;p&gt;โอเคในเมื่อ Evironment น่าจะพร้อมแล้วทำการรัน exe2aut เพื่อแปลงจาก Binary ของมัลแวร์ไปเป็น Source Code โลดด&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jusmistic.github.io/images/malware-diary1/6.jpg&#34; alt=&#34;Source Code ที่ได้จาก Exe2Aut&#34; /&gt;&lt;/p&gt;

&lt;p&gt;จากภาพด้านบนจะเห็นว่า Source Code ที่เราได้มันอ่านไม่รู้เรื่อง ซึ่งน่าจะหมายความว่าคนที่สร้างมัลแวร์ตัวนี้นั้นน่าจะรู้ในข้อด้อยของภาษา AutoIt คือสามารถทำ Reverse Engineer ได้ง่าย จึงมีการทำ Obfuscate Source Code(ทำให้ Source Code อ่านได้ยาก) ก่อนทำการคอมไพล์ ทำไงดีหว่าถึงจะ Deobfuscate Source Code ตัวนี้ได้ เลยลองหาใน Google ดู ไปเจอ &lt;a href=&#34;https://github.com/cystack/monero-mining-malware&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Github Repo&lt;/a&gt; นึงมีคนอัพมัลแวร์ตัวนึงที่เขียนด้วย AutoIt ซึ่งดูลักษณะโครงสร้างเหมือนกับ Malware ตัวนี้เลยมาทราบภายหลังว่าชื่อ **DigMine **แต่มัลแวร์ตัวนี้มีข้อแตกต่างกับตัวที่เคยพบคือมีการทำ Obfuscate ที่ยากต่อการ Deobfuscate มากขึ้น พูดง่าย ๆ คือมันแงะยากขึ้นนั่นแหละ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jusmistic.github.io/images/malware-diary1/7.jpg&#34; alt=&#34;เปรียบเทียบมัลแวร์ระหว่างตัวเก่าที่เคยพบกับตัวปัจจุบัน&#34; /&gt;&lt;/p&gt;

&lt;p&gt;จากภาพด้านบนจะเห็นว่าแบบเก่านั้นมีการ Obfuscate ง่ายมากคือแค่เอา String ไปเข้ารหัส แต่จากแบบใหม่จะเห็นว่ามีการตัด String ออกเป็น String ย่อย ๆ แล้วเอา String นั้นไปเก็บใน Function หรือเอาไปเก็บในตัวแปรต่าง ๆ ก่อนแล้วจึงค่อยเอามาต่อกันแล้วจึงถอดรหัส&lt;/p&gt;

&lt;p&gt;แต่สิ่งที่เหมือนเดิมคือ Function ถอดรหัสเราเลยลองเอามา Deobfuscate ให้อ่านง่ายขึ้น&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jusmistic.github.io/images/malware-diary1/8.jpg&#34; alt=&#34;Function ในการถอดรหัสมาเขียนใหม่ให้อ่านง่ายขึ้น&#34; /&gt;&lt;/p&gt;

&lt;p&gt;จาก Source Code ที่ทำการ Deobfuscate แล้วจะเห็นว่ามันอ่านง่ายขึ้นมากกก มาดู ๆ อัลกอริทึมเหมือนการเข้ารหัสแบบ Vigenère cipher  เลยนี่หว่ายังมีใครใช้อยู่ด้วยหรอวะ! ยังกะ CTF&lt;/p&gt;

&lt;p&gt;แต่ว่า&amp;hellip;ถึงแม้เราจะ Deobfuscate ได้บางส่วนเราก็ยังไม่เข้าใจการทำงานมันอยู่ดี เพราะเรา Deobfuscate ได้แค่ส่วนของ Function ถอดรหัส ถ้าจะให้ไปไล่ Deobfucate มือทั้ง Source Code คงไม่ไหว&amp;hellip;เพราะอะไรหน่ะหรอ?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;เพราะเราขี้เกียจยังไงหล่ะ&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;แต่มันก็ยังพอมีวิธีเอา Source Code ไปใช้แบบคนขี้เกียจอยู่บ้าง ติดตาม Part 2 นะค้าบบ
ถ้ามีอะไร/ตรงไหนผิดพลาดเมนชั่นมาบอกใน Twitter ก็ได้ค้าบ เดี้ยวจะเอาไปปรับปรุงแก้ ขอบคุณที่อ่านจนจบนะค้าบบ 😀&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
